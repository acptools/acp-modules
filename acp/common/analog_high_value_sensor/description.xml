<?xml version="1.0"?>
<component-type name="acp.common.analog_high_value_sensor">
	<description>Sensor that watches analog pin for exceeding a given threshold (HIGH state).</description>
	<view>
		<includes>
			<include>AnalogHighValueSensor.h</include>
		</includes>
		<class>acp_common_analog_high_value_sensor::TAnalogHighValueSensor</class>
		<template-args>
			<arg type="property">History</arg>
		</template-args>
		<constructor-args>
			<arg type="autogenerated">controller</arg>
		</constructor-args>
	</view>
	<controller>
		<includes>
			<include>AnalogHighValueSensor.h</include>
		</includes>
		<class>acp_common_analog_high_value_sensor::AnalogHighValueSensorController</class>
		<template-args>
			<arg type="property">History</arg>
		</template-args>
		<constructor-args>
			<arg type="property">Pin</arg>
			<arg type="property">Threshold</arg>
			<arg type="property">InvertedLogic</arg>
			<arg type="property">ResetInterval</arg>
			<arg type="property">ReportHighState</arg>
			<arg type="property">ReportLowState</arg>
			<arg type="property">ReportCyclesCount</arg>
		</constructor-args>
	</controller>
	<properties>
		<property>
			<name>Pin</name>
			<type>analog-pin</type>
			<description>The controlled analog pin.</description>
		</property>
		<property>
			<name>History</name>
			<type min="3" max="20">byte</type>
			<value type="default">3</value>
			<description>The threshold value.</description>
		</property>
		<property>
			<name>Threshold</name>
			<type>unsigned int</type>
			<value type="default">512</value>
			<description>The threshold value.</description>
		</property>
		<property>
			<name>InvertedLogic</name>
			<type>bool</type>
			<value type="default">false</value>
			<description>True, if the state is inverted (LOW and HIGH states are mutually exchanged), false otherwise.</description>
		</property>
		<property>
			<name>ResetInterval</name>
			<type>unsigned int</type>
			<value type="default">0</value>
			<description>Time in milliseconds (max. 60 seconds) after which HIGH state is changed to LOW state. If the value is 0, manual reset of the HIGH state is required.</description>
		</property>
		<property>
			<name>ReportHighState</name>
			<type>bool</type>
			<value type="default">true</value>
			<description>True, if the continues reporting of the LOW state is enabled, false otherwise.</description>
		</property>
		<property>
			<name>ReportLowState</name>
			<type>bool</type>
			<value type="default">false</value>
			<description>True, if the continues reporting of the HIGH state is enabled, false otherwise.</description>
		</property>	
		<property>
			<name>ReportCyclesCount</name>
			<type>byte</type>
			<value type="default">33</value>
			<description>The number of reads after which the state reporting event is fired.</description>
		</property>	
		<property>
			<name>ReadInterval</name>
			<type>unsigned long</type>
			<value type="default">30</value>
			<description>Interval in milliseconds in which the state of the associated hw pin is read. This value is also used as a debounce interval.</description>
		</property>
	</properties>
	<events>
		<event>
			<name>OnStateChanged</name>
			<binding type="attribute">stateChangedEvent</binding>
			<description>When the state is changed.</description>
		</event>	
		<event>
			<name>OnStateReported</name>
			<binding type="attribute">stateReportedEvent</binding>
			<description>When the state of pin is reported.</description>
		</event>	
	</events>
	<loopers>
		<looper>
			<method>readLooper</method>
			<interval>ReadInterval</interval>
		</looper>
	</loopers>	
</component-type>
